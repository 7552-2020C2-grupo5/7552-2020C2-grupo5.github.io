{"0": {
    "doc": "Administradores",
    "title": "Administradores",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Listado de administradores {:toc} Al seleccionar la opción \"Administradores\" del menú, se abrirá el listado de administradores. En este se puede ver una tabla con todos los administradores del Backoffice y sus datos principales, (nombre, apellido y mail). {% rbimg backoffice_admins_list.png %} El botón que se encuentra presente en la columna \"Acciones\" de la tabla, redirige a la pantalla de visualización del administrador seleccionado. En la esquina inferior derecha, se puede observar un botón \"+\", el cual redirige a la pantalla de creación de un nuevo perfil de administrador. ## Filtros Por encima de la tabla se encuentra un desplegable donde se pueden ingresar los filtros a aplicar sobre el listado. {% rbimg backoffice_admins_list_filters.png %} Estos campos no son obligatorios y se pueden aplicar los filtros que se desee. Los campos indican lo siguiente: - Nombre: busca a aquellos administradores que contengan la cadena ingresada dentro de su nombre - Apellido: busca a aquellos administradores que contengan la cadena ingresada dentro de su apellido - Email: busca a aquellos administradores que contengan la cadena ingresada dentro de su mail Una vez ingresados los filtros deseados, se debe hacer click en el botón \"Aplicar\" dentro del desplegable. Se recargará entonces la página, apareciendo en el listado los administradores que cumplan con los filtros cargados. {% rbimg backoffice_admins_list_filters_applied.png %} # Visualización de administrador Al ingresar al perfil de un administrador, se podrá ver los datos personales del mismo (que consisten en los mismos datos que se muestran en la tabla y la fecha de registro). {% rbimg backoffice_admin.png %} # Alta de administrador Esta pantalla consiste en un formulario para poder cargar un nuevo usuario administrador del Backoffice. {% rbimg backoffice_new_admin.png %} Una vez completados todos los campos correctamente, al presionar el botón \"Crear\", se redirigirá al listado de administradores y se podrá ver el nuevo administrador cargado presente en dicho listado. {% rbimg backoffice_new_admin_filled.png %} {% rbimg backoffice_new_admin_list.png %} ",
    "url": "/docs/backoffice/admins.html",
    "relUrl": "/docs/backoffice/admins.html"
  },"1": {
    "doc": "Reservas",
    "title": "Reservas",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Listado de transacciones de reservas {:toc} Al seleccionar la opción \"Reservas\" del menú, se abrirá el listado de transacciones de reservas. En este se puede ver una tabla con todos las reservas de la aplicación mobile. Para cada reserva se muestra la fecha de inicio y finalización de la misma, la fecha en la que se efectuo la reserva, el monto de la misma y su estado (que puede ser Aceptado, Rechazado o Pendiente). {% rbimg backoffice_bookings_list.png %} A su vez, la columna \"Acciones\" de la tabla presenta dos botones: {% rbimg backoffice_bookings_list_actions.png %} El botón 1 redirige a la pantalla de visualización de la publicación correspondiente a la reserva, mientras que el botón 2 hace lo propio con el perfil del usuario que la efectuó. ## Filtros Por encima de la tabla se encuentra un desplegable donde se pueden ingresar los filtros a aplicar sobre el listado. {% rbimg backoffice_bookings_list_filters.png %} Estos campos no son obligatorios y se pueden aplicar los filtros que se desee. Los campos indican lo siguiente: - Mín. fecha de inicio: mínima fecha de inicio que puede tener la reserva. - Max. fecha de finalización: máxima fecha de finalización que puede tener la reserva. - Estado: estado que debe tener la reserva. Una vez ingresados los filtros deseados, se debe hacer click en el botón \"Aplicar\" dentro del desplegable. Se recargará entonces la página, apareciendo en el listado las reservas que cumplan con los filtros cargados. {% rbimg backoffice_bookings_list_filters_applied.png %} ",
    "url": "/docs/backoffice/bookings.html",
    "relUrl": "/docs/backoffice/bookings.html"
  },"2": {
    "doc": "Bookings",
    "title": "Bookings",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Bookings microservice ![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/7552-2020C2-grupo5/bookings-microservice) En [este link](https://github.com/7552-2020C2-grupo5/bookings-microservice) se puede acceder al repositorio. # Documentación OpenAPI La documentación de swagger se puede acceder en el [root de la aplicación](https://bookbnb5-bookings.herokuapp.com). La misma es generada automáticamente con `flask-restx`. # Status badges ![](https://raw.githubusercontent.com/7552-2020C2-grupo5/bookings-microservice/master/coverage-badge.svg)[![Tests](https://github.com/7552-2020C2-grupo5/bookings-microservice/actions/workflows/tests.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/bookings-microservice/actions/workflows/tests.yml)[![Linters](https://github.com/7552-2020C2-grupo5/bookings-microservice/actions/workflows/linters.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/bookings-microservice/actions/workflows/linters.yml)[![Bandit](https://github.com/7552-2020C2-grupo5/bookings-microservice/actions/workflows/bandit.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/bookings-microservice/actions/workflows/bandit.yml) # Class diagram ![](https://github.com/7552-2020C2-grupo5/bookings-microservice/blob/master/docs/images/project_classes.png?raw=true) # Packages dependencies ![](https://github.com/7552-2020C2-grupo5/bookings-microservice/blob/master/docs/images/packages_dependencies.png?raw=true) # Deploy ## Heroku ![](https://heroku-badge.herokuapp.com/?app=bookbnb5-bookings) Instrucciones [acá](https://github.com/7552-2020C2-grupo5/bookings-microservice#deploy-to-heroku). ## Local ### Using docker Instrucciones [acá](https://github.com/7552-2020C2-grupo5/bookings-microservice#docker) ### Using poetry Instrucciones [acá](https://github.com/7552-2020C2-grupo5/bookings-microservice#running-locally) ## Configuration El microservicio usa [youconfigme](https://crossnox.github.io/YouConfigMe/), la cual sigue [The Twelve-Factor App](https://12factor.net/config). Config vars usadas: - `DATABASE_URL`: URI de la DB a usar - `DD_API_KEY`: api key de DataDog - `DD_DYNO_HOST`: requerido para agrupar hosts en DataDog - `DD_TAGS`: tags para DataDog - `ENV`: `DEV` denota un entorno de desarrollo, que no valida server tokens. Cualquier otro valor implica un entorno productivo. - `HEROKU_API_KEY`: api key de heroku requerida para setear config vars - `HEROKU_APP_NAME`: nombre de la app en heroku, requerida para setear config vars ",
    "url": "/docs/backend/bookings.html",
    "relUrl": "/docs/backend/bookings.html"
  },"3": {
    "doc": "Backoffice",
    "title": "Backoffice",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Admin Backoffice {:toc} En esta sección se incluye la documentación referida al Manual del Usuario del Backoffice. A continuación se describe información general sobre como loguearse y el layout general de la aplicación. ## Login {:toc} Al ingresar por primera vez, se encuentra la pantalla de login, donde deberá ingreserse el email con el que se encuentra registrado el usuario administrador y su contraseña. {% rbimg backoffice_login.png %} ## Layout {:toc} Una vez logueado se puede observar el layout de la aplicación. El mismo consiste en un menú a la izquierda, el cual permite navegar por las distintas secciones de la aplicación. {% rbimg backoffice_layout_web.png %} Cuando se encuentra en modo mobile, el menú se encuentra escondido. Para desplegarlo, se debe hacer click en el botón que se encuentra a la izquierda en la barra superior azul de la pantalla. {% rbimg backoffice_layout_mobile.png %} {% rbimg backoffice_layout_mobile_menu.png %} Para desloguearse, se debe hacer click en el botón \"Cerrar Sesión\" que también se encuentra en la barra superior azul. ",
    "url": "/docs/backoffice/",
    "relUrl": "/docs/backoffice/"
  },"4": {
    "doc": "App",
    "title": "App",
    "content": "Android App =========== A continuación vamos a mostrar algunos flujos comunes sobre cómo utilizar la aplicación ## Registro y login Para comenzar a utilizar la aplicación lo primero que debemos hacer es registrarnos. Para esto haremos click en el text \"Registrate\" que aparece en la pantalla de Login. Una vez hecho esto seremos redirigidos a la pantalla de registro. Aquí debemos completar con nuestros datos junto con la contraseña. Finalmente, una vez completados todos los campos tocaremos el botón \"REGISTRARME\". Aquí volveremos al pantalla de Login indicándonos que el registro fue exitoso. Para loguearnos con la nueva cuenta que acabamos de crear deberemos llenar el login con los datos que usamos para registrarnos Aquí tocamos el botón \"INICIAR SESIÓN\" y finalmente podemos utilizar al aplicación ## Menúes y navegación Veremos a continuación la composición del menú de nuestra aplicación y que contiene cada uno. Para ingresar a este menú deberemos swipear desde la izquierda de la pantalla. Una vez hecho esto de desplegará el siguiente menú con las opciones de navegación. Vemos entonces que tenemos las siguientes pantallas: - _**Mis Recomendaciones**_: Esta sección contiene las recomendaciones que nos provee la aplicación en base a lo más popular que haya publicado. - _**Buscar**_: Esta sección nos permitirá realizar búsquedas con distintos filtros sobre las publicaciones que existen y no está n bloqueadas. - _**Perfil**_: Esta sección nos permite acceder a la gestión de nuestro perfil en la aplicación. Esto es: editarlo y visualizarlo - _**Mis Reservas**_: Esta sección nos permitirá acceder a todas las reservas que hayamos hecho. - _**Mis Publicaciones**_: Esta sección nos permitirá conocer qué es lo que hemos publicado y acceder a ese contenido muy fácilmente. - _**Publicaciones favoritas**_: Esta sección contiene las publicaciones que hemos marcado como favoritas. Ya sean propias o de otros usuarios. - _**Mis consultas**_: Esta sección contiene las consultas privadas que hayamos realizado a otros usuarios. - _**Salir**_: Esta sección nos permitirá deslogearnos de nuestro usuario, ya sea para acceder con otro o porque deseamos simplemente cerrar sesión. Para acceder a cualquiera de las secciones bastará simplemente con tocar el título de la misma en el menú. En cualquier momento estará disponible este menú para navegar por aplicación, a excepción de aquellos casos en que no estemos deslogueados ## Perfil ### Visualización de perfil Una vez que hemos aprendido a darnos de alta en la aplicación y como loguearnos querríamos vernos como nos ven los demás usuarios (y en todo caso, cambiarlo). Para esto existe la sección \"Perfil\" que nos nombramos anteriormente. Para esto basta con desplegar el menú de navegación e ir a la solapa llamada \"Perfil\". Una vez allí podremos visualizar algo como lo siguiente: Podemos visualizar entonces nuestros datos personales: - **Email**: Este es el email con que nos registramos en la aplicación. Aquí será donde nos envíen el email para recuperar nuestra contraseña y cualquier contacto que se necesite del usuario. - **Nombre**: Este es el nombre con que nos registramos en la aplicación. Es el que aparecerá cuando hagamos una reserva y el mismo que aparecerá cuando hagamos consultas privadas a otros usuarios. - **Fecha de registro**: Esta es la fecha con que nos registramos en la aplicación. - **Saldo**: Este punto es importante ya que nos indica qué saldo tenemos disponible actualmente en la aplicación para hacer reservas y publicaciones. Además de la cantidad de ethers que tenemos (ETH). Tenemos la cotización de esos Ethers en diferentes monedas para el momento en que visitamos nuestro perfil. En este caso podemos ver que tenemos 0 Ethers ya que recién nos acabamos de registrar, y todavía no nos cargaron saldo. - **Dirección de nuestra wallet**: Este punto nos indica cuál es la dirección de nuestra billetera virtual. Es decir, a dónde deberán enviarnos dinero. Si tocamos este campo y mantenemos el dedo podremos observar que este campo es copiable, esto lo que nos permite es pasarles esta dirección fácilmente a nuestros amigos. ### Edición de perfil Para editar nuestro perfil deberemos ir a la solapa de \"Perfil\". Una vez allí deberemos tocar el ícono del lápiz. Esto nos llevará a otra ventana la cual se verá así: Una vez aquí podremos observar la información actual de nuestro perfil junto con los datos. Para modificar entonces alguno de ellos deberemos actualizar ese campo y tocar el botón de **\"GUARDAR\"** ## Publicaciones ### Dar de alta una publicación Para comenzar a publicar deberemos ir a la solapa de **\"Mis Publicaciones\"**. Una vez aquí podremos visualizar las publicaciones que ya hemos hecho junto con la posibilidad de hacer nuevas. En este caso no tenemos ninguna hecha ya que acabamos de crear al usuario. Por lo que procedermos a publicar algo. Tocamos el botón de **+** el cuál nos llevará a la siguiente pantalla: Una vez aquí deberemos llenar los datos de la publicación con el título, cantidad de cuartos, camas, etc. y el precio por noche (que será lo que se le cobrará por cada noche de reserva a los huéspedes). Debemos asegurarnos también de tener saldo disponible en nuestra billetera ya que se nos cobra una pequeña comisión por cada publicación que hagamos (en este caso nos cargamos un par de ethers a nuestra cuenta para poder publicar). Una vez que hayamos hecho esto (vemos como nos debería quedar la publicación con todos los datos cargados) tocamos el botón **\"PUBLICAR\"**. Esto, si se cumplen las precondiciones (tener saldo), hará la publicacion y nos redigirá a la pantalla de **\"Mis Publicaciones\"**, esta vez con la nueva publicación que acabamos de hacer. ### Edición de una publicación Lo primero que debemos hacer para editar alguna de nuestras publicaciones, es ir a la solapa de **\"Mis Publicaciones\"**. Aquí tocaremos el botón que dice **\"Editar\"** en la publicación que deseemos hacer cambios. Una vez aquí veremos la publicación junto con sus datos cargados (como si recién los hubiesemos llenado). Entonces modificamos los campos que deseamos a nuestro gusto y tocamos el botón de **\"PUBLICAR\"**. El mismo reflejará los cambios en la publicación y nos devoverá a la pantalla de **\"Mis publicaciones\"** ## Reservas ### Resevar un lugar Para realizar una reserva lo primero que deberemos hacer es ir a la publicación que deseamos reservar. Veremos algo así: Para encontrar una publicación reservable podemos hacerlo por las búsquedas o mismo por las recomendaciones. Sin importar como lleguemos a la publicación para realizar la reserva debermos tocar el botón que dice **\"Reservar\"**. Esto nos llevará a la siguiente pantalla: En esta pantalla deberemos completar con los datos de la nueva reserva, esto es: la fecha de checkin y la fecha de checkout. Para esto bastará con tocar alguno de los calendarios y completar la fecha correspondiente. Las cuáles lógicamente tienen que tener por lo menos un día de diferencia, y la fecha de checkout debe ser posterior a la de checkin. Esto lo que hará es crear un intento de reserva. Es decir, el dueño de la publicación tendrá que aceptar la reserva que nosotros proponemos y recién ahí quedará en estado confirmada. El precio que se nos descontará entonces es la cantida de noches por el precio unitario de la misma. Una vez creado el intento de reserva se nos redigirá a la pantalla de nuestras reservas en la cuál se mostrará la cantidad de reservas que tenemos y su estado (los cuales pueden ser): - **Aceptado**: el dueño de la publicación aceptó la reserva y la misma quedó confirmada en el sistema. En este caso se descuenta la plata del dueño de la reserva (inquilino) con un equivalente de la cantidad de noches por el precio unitario de cada una. - **Rechazado**: el dueño de la publicación rechazó nuestro intento de reserva. En este caso la plata de la reserva se devuelve a nuestro monedero - **Pendiente**: el dueño de la reserva todavía no realizó ninguna acción. Es decir todavía no decidió si aceptarla o no Una vez que realizamos entonces el intento de reserva visualizaremos algo como esto: Aquí podemos observar toda la información de nuestra reserva. - **Fecha de inicio**: fecha de checkin de nuestra reserva. Esto es, a partir de qué día podemos hospedarnos en el lugar - **Fecha de finalización**: fecha de checkout de nuestra reserva. Esto es, en qué día deberemos abandomar (como límite) el lugar - **Owner**: dueño de la reserva, en este caso nosotros - **Estado**: Estado de la reserva, son los etados que mencionamos anteriormente. - **Vencida**: podemos además observar si la reserva está o no cumplida. Una vez que se cumple la fecha de checkout la reserva se considera vencida y se podrá calificar nuestra experiencia en el lugar ### Gestión de reservas de nuestras publicaciónes Por otro lado, cuando publicamos nuestro lugar también se generan reservas de otros usuario hacia éste. Las cuales nosotros deberemos aceptar o rechazar de acuerdo a nuestras preferencias. Para gestionar esto lo que deberemos hacer es revisar periódicamente las publicaciones que hicimos y sus reservas asociadas. Para esto partimos de nuestras publicaciones Luego entramos a la publicación de la cuál queremos gestionar sus reservas tocando la card correspondiente Una vez aquí tocamos el botón que dice **\"Reservas asociadas\"** el cuál nos redirigirá a las reservas que otros usuarios hayan hecho en esa publicación. Nosotros desde aquí podremos gestionar (es decir, aceptar o rechazar) las mismas. Para esto tocaremos el botón correspondiente (para aceptar o rechazar). En este caso aceptamos la reserva por lo que la misma deberá cambiar de estado. Puede que requiera salir y volver a entrar a la pantalla para visualizar el cambio de estado Una vez aceptada la reserva se actualizarán las billteras de ambos usuarios con los nuevos montos. Acreditándole al dueño de la publicación (en el caso de aceptar) la correspondiente ganancia de la reserva. ## Consultas Puede que ante la duda de una nueva reserva deseemos saber un poco más de la publicación, o incluso más acerca del dueño, por lo que en este caso entran en juego las consultas tanto públicas como privadas ### Realizar consultas públicas Para realizar una consulta púbica deberemos primeramente acceder a la publicación sobre la cuál queremos consultar. Una vez allí deberemos navegar hasta el fondo de la misma en la cuál veremos la caja de consultas públicas. Para realizar entonces una consulta escribiremos el texto que queramos y tocaremos en **\"CONSULTAR\"** Por ejemplo nosotros queremos consultar por la zona en que se encuentra la publicación, entonces escribimos la consulta y la envíamos: ### Responder consultas públicas Por otro lado, como dueño de la publicación habrá gente que nos haga consultas públicas y nosotros deberemos responder. Retomando con el ejemplo anterior y suponiendo que somos los dueños de la publicación, para responder a consultas públicas deberemos a la publicación y en particular a su caja de comentarios (al fondo de la misma). Una vez aquí lo que deberemos hacer es seleccionar la consulta que queremos responder (lo hacemos tocando el comentario en sí, el mismo se mostrará en violeta). Una vez seleccionado el comentario s e nos abrirá la caja de consultas para poder responder. Una vez que terminamos tocamos **\"ENVIAR\"** y la consulta pública quedará respondida. Mostramos el flujo a continuación: ### Realizar consultas privadas Además existen casos en que no queremos que nuestras consultas sean vistas por todas las personas. Por lo que lo mejor en estos casos es realizar una consulta privada. Para esto deberemos ir nuevamente a la publicación de la cuál deseamos realizar la consulta. Una vez aquí deberemos visitar el perfil de publicante (esto se hace tocando el ícono de **Perfil** que aparece en la publicación). Una vez en el perfil tocamos el icono de mensaje (\"Carta\"). Esto nos abrirá una nueva ventana de conversación (con forma de chat) para pode consultarle al dueño las dudas que tengamos. De esta forma se enviará una notificación al dueño sobre la nueva consulta la cuál el podrá responder. ### Responder consultas privadas Para responder consultas privadas el dueño del lugar deberá visitar la solapa de **\"Mis consultas\"** del menú principal. Aquí podrá visualizar una lista de personas de las cuales recibió consultas y podrá responder cada una como si fuese un chat. Una vez elegido a quíen responderle con tocar su nombre de usuario podrá acceder a la conversación ## Búsquedas Podemos querer también encontrar lugares por características, ya sea precio, cantidad de habitaciones, lugar, etc. Para esto existe el panel de búsqueda. Para acceder basta con ir a la solapa de **\"Buscar\"**. Una vez aquí tendremos la posibilidad de completar todas las características que deseemos sobre el lugar Tenemos entonces los siguientes filtros: - **Cantidad de baños**: esto se refiere a la cantidad de baños mínima que tiene que tener el lugar - **Cantidad de cuartos**: esto se refiere a la cantidad de cuartos mínima que tiene que tener el lugar - **Cantidad de camas**: esto se refiere a la cantidad de camas mínima que tiene que tener el lugar - **Precio mínimo por noche**: esto se refiere al precio mínimo que debe tener el lugar por noche - **Precio máximo por noche**: esto se refiere al precio máximo que debe tener el lugar por noche - **Fecha de checkin**: Filtra las publicaciones por la fecha de checkin. Para editar tocar el calendario - **Fecha de checkout**: Filtra las publicaciones por la fecha de checkout. Para editar tocar el calendario - **Ubicación**: en este campo podemos o bien escribir una dirección sobre la cuál buscar o podemos tildar la opción \"Utilizar mi ubicación actual\", en este caso el sistema tomará la ubicación actual del GPS Una vez hayamos completado los filtros que nos parezcan oportunos tocaremos el botón \"BUSCAR\" que nos devolverá las publicaciones que matcheen. ## Calificaciones ### Calificar huésped Para calificar un huésped tenemos que tener alguna reserva que haya hecho esa persona y que la misma esté vencida. Recién cuando la reserva esté vencida es cuando se habilitará la opción de dejar una review del huésped. Para esto debemos ir a las reservas asociadas al lugar que tengamos publicados y una vez allí deberemos tocar el **\"CALIFICAR HUÉSPED\"**. El cual nos llevará a la pantall de reviews generales de esa persona. Una vez aquí escribimos un comentario y seleccionamos la cantidad de estrellas que le damos a ese huésped. Las posibildades de puntaje que tenemos son: \"Muy bueno\", \"Bueno\", \"Malo\", \"Muy malo\". Cuando hayamos terminado tocamos el botón de **\"ENVIAR\"**. Dejamos a continuación imágenes del circuito cimpleto. ### Calificar lugar Para calificar un lugar el flujo es muy parecido a la calificación del huésped. Comenzamos yendo a la solapa de **\"Mis Reservas\"**. Una vez aquí veremos las reservas que tenemos vencidas y cuáles son las que podemos calificar. Para esto se habilitará el botón de **\"Calificar lugar\"**. Cuando toquemos este botón se nos abrirá la pantalla de reviews de la publicación y nos dará la posibilidad de dejar una nueva. Para esto escribimos un comentario y tocamos una puntuación en estrellas (aquí nuevamente las opciones son \"Muy bueno, \"\"Bueno\", \"Malo\", \"Muy malo\"). Una vez hayamos hecho esto tocamos el botón **\"ENVIAR\"**, la cuál dejará la review visible para el resto de los usuarios ",
    "url": "/docs/app/",
    "relUrl": "/docs/app/"
  },"5": {
    "doc": "Backend",
    "title": "Backend",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Backend En esta sección se incluye la documentación referida a los microservicios de backend. # Arquitectura general {% rbimg arq_general.png %} # Cookiecutter Varios de los microservicios fueron creados a partir de un [cookiecutter](cookiecutter.readthedocs.io/), el cual fue evolucionando y recibiendo las mejoras que se hacían en cada microservicio. En el README del [repo](https://github.com/7552-2020C2-grupo5/flask_cookiecutter) se puede ver la lista de componentes y funcionalidades. El uso de un cookiecutter facilitó mucho el desarrollo de nuevos microservicios y permitió tener rápidamente un walking skeleton produccionable, con las mejores prácticas y features probados. ",
    "url": "/docs/backend/",
    "relUrl": "/docs/backend/"
  },"6": {
    "doc": "Introducción",
    "title": "Introducción",
    "content": "# BookBNB - Grupo 5 - 2020C2 Esta página contiene la documentación referida a la entrega del TP de 7552 - Taller II del grupo 5 del 2020C2. A la izquierda en la barra de navegación se puede ver cada sección disponible. ",
    "url": "/",
    "relUrl": "/"
  },"7": {
    "doc": "Métricas",
    "title": "Métricas",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Métricas Al iniciar sesión, o bien al seleccionar la opción \"Métricas\" del menú, se abrirá el dashboard con las métricas de negocio presentes en el Backoffice. {% rbimg backoffice_metrics.png %} Se puede elegir el rango de fechas para el cual se querrá analizar las métricas presentes. Por defecto, la fecha final del rango es la actual y la incial es 7 días antes. Es decir, se observan los valores para los últimos 7 días. Una vez seleccionado el nuevo rango de fechas (la fecha de fin debe ser mayor a la de inicio), se debe presionar el botón \"Aplicar\" para obtener los valores correspondientes al nuevo período. {% rbimg backoffice_differnet_metrics.png %} Las métricas mostradas corresponden a: - Cantidad de usuarios nuevos por día {% rbimg backoffice_metrics_1.png %} - Cantidad de publicaciones nuevas por día {% rbimg backoffice_metrics_2.png %} - Monto total en transacciones por día {% rbimg backoffice_metrics_3.png %} ",
    "url": "/docs/backoffice/metrics.html",
    "relUrl": "/docs/backoffice/metrics.html"
  },"8": {
    "doc": "Middleware",
    "title": "Middleware",
    "content": "## Instalación de dependencias Para instalar todas las dependencias necesarias debemos tener instalado el gestor de paquetes `pip` de python en nuestra computadora. Luego, correr en el directorio raíz del repositorio el siguiente comando: ```console pip install -r requirements.txt ``` --- ## Deploy En esta sección explicaremos como desplegar la API tanto localmente como en la nube. ### Local Una vez realizados todos los pasos de instalación, correr en el directorio raíz del repositorio el siguiente comando: ```console gunicorn -w 2 --bind 0.0.0.0: \"bookbnb_middleware.app:create_app()\" ``` Una vez corrido este comando tendremos levantado localmente nuestro servidor en el puerto ``. ### Heroku Para desplegar la API a Heroku debemos primero loguearnos a nuestra cuenta de Heroku mediante la CLI con el siguiente comando: ```console heroku login ``` Luego, debemos agregar el remoto del repositorio de heroku mediante el comando: ```console git remote add heroku ``` Por último, debemos pushear los cambios a Heroku con el comando: ```console git push heroku master ``` --- ",
    "url": "/docs/backend/middleware.html",
    "relUrl": "/docs/backend/middleware.html"
  },"9": {
    "doc": "Notifications",
    "title": "Notifications",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Notifications microservice ![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/7552-2020C2-grupo5/notifications-microservice) En [este link](https://github.com/7552-2020C2-grupo5/notifications-microservice) se puede acceder al repositorio. # Documentación OpenAPI La documentación de swagger se puede acceder en el [root de la aplicación](https://bookbnb5-notifications.herokuapp.com). La misma es generada automáticamente con `flask-restx`. # Status badges ![](https://raw.githubusercontent.com/7552-2020C2-grupo5/notifications-microservice/master/coverage-badge.svg)[![Tests](https://github.com/7552-2020C2-grupo5/notifications-microservice/actions/workflows/tests.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/notifications-microservice/actions/workflows/tests.yml)[![Linters](https://github.com/7552-2020C2-grupo5/notifications-microservice/actions/workflows/linters.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/notifications-microservice/actions/workflows/linters.yml)[![Bandit](https://github.com/7552-2020C2-grupo5/notifications-microservice/actions/workflows/bandit.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/notifications-microservice/actions/workflows/bandit.yml) # Class diagram ![](https://github.com/7552-2020C2-grupo5/notifications-microservice/blob/master/docs/images/project_classes.png?raw=true) # Packages dependencies ![](https://github.com/7552-2020C2-grupo5/notifications-microservice/blob/master/docs/images/packages_dependencies.png?raw=true) # Deploy ## Heroku ![](https://heroku-badge.herokuapp.com/?app=bookbnb5-notifications) Instrucciones [acá](https://github.com/7552-2020C2-grupo5/notifications-microservice#deploy-to-heroku). ## Local ### Using docker Instrucciones [acá](https://github.com/7552-2020C2-grupo5/notifications-microservice#docker) ### Using poetry Instrucciones [acá](https://github.com/7552-2020C2-grupo5/notifications-microservice#running-locally) ## Configuration El microservicio usa [youconfigme](https://crossnox.github.io/YouConfigMe/), la cual sigue [The Twelve-Factor App](https://12factor.net/config). Config vars usadas: - `DATABASE_URL`: URI de la DB a usar - `DD_API_KEY`: api key de DataDog - `DD_DYNO_HOST`: requerido para agrupar hosts en DataDog - `DD_TAGS`: tags para DataDog - `ENV`: `DEV` denota un entorno de desarrollo, que no valida server tokens. Cualquier otro valor implica un entorno productivo. - `HEROKU_API_KEY`: api key de heroku requerida para setear config vars - `HEROKU_APP_NAME`: nombre de la app en heroku, requerida para setear config vars ",
    "url": "/docs/backend/notifications.html",
    "relUrl": "/docs/backend/notifications.html"
  },"10": {
    "doc": "Payments",
    "title": "Payments",
    "content": "## Instalación de dependencias Para instalar todas las dependencias necesarias debemos tener instalado el gestor de paquetes `npm` de node en nuestra computadora. Luego, correr en el directorio raíz del repositorio el siguiente comando: ```console npm install ``` --- ## Deploy En esta sección explicaremos como desplegar la API tanto localmente como en la nube. ### Local Una vez realizados todos los pasos de instalación, correr en el directorio raíz del repositorio el siguiente comando: ```console npm start ``` Una vez corrido este comando tendremos levantado localmente nuestro servidor de pagos en el puerto `3000`. ### Heroku Para desplegar la API a Heroku debemos primero loguearnos a nuestra cuenta de Heroku mediante la CLI con el siguiente comando: ```console heroku login ``` Luego, debemos agregar el remoto del repositorio de heroku mediante el comando: ```console git remote add heroku ``` Por último, debemos pushear los cambios a Heroku con el comando: ```console git push heroku master ``` ",
    "url": "/docs/backend/payments.html",
    "relUrl": "/docs/backend/payments.html"
  },"11": {
    "doc": "Publicaciones",
    "title": "Publicaciones",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Listado de publicaciones {:toc} Al seleccionar la opción \"Publicaciones\" del menú, se abrirá el listado de publicaciones. En este se puede ver una tabla con todos las publicaciones de la aplicación mobile y sus datos principales, (título, descipción, cantidad de habitaciones, baños y camas, precio por noche y fecha de publicación) y su estado (que puede ser Activa o Bloqueada). {% rbimg backoffice_publications_list.png %} Para aquellas publicaciones que se encuentran activas, la columna \"Acciones\" de la tabla presenta dos botones: {% rbimg backoffice_publications_list_actions.png %} El botón 1 redirige a la pantalla de visualización de la publicación (se verá en la siguiente sección). El botón 2 se utiliza para bloquear una publicación. ## Bloqueo de publicación Al presionar el botón de bloqueo en una publicación, se abre el siguiente modal: {% rbimg backoffice_publications_list_block_modal.png %} Si se presiona \"Cancelar\", se cerrará el modal, volviendo al listado de publicaciones. Si se presiona \"Confirmar\", se bloqueará la publicación para la cual se clickeó el botón de bloqueo y se recargará el listado, mostrando los datos actualizados. ## Filtros Por encima de la tabla se encuentra un desplegable donde se pueden ingresar los filtros a aplicar sobre el listado. {% rbimg backoffice_publications_list_filters.png %} Estos campos no son obligatorios y se pueden aplicar los filtros que se desee. Los campos indican lo siguiente: - Habitaciones: cantidad mínima de habitaciones que puede tener la publicación. - Camas: cantidad mínima de camas que puede tener la publicación. - Baños: cantidad mínima de baños que puede tener la publicación. - Mín. precio por noche (ETH): precio mínimo por noche en ETH que puede tener la publicación. - Max. precio por noche (ETH): precio máximo por noche en ETH que puede tener la publicación. Una vez ingresados los filtros deseados, se debe hacer click en el botón \"Aplicar\" dentro del desplegable. Se recargará entonces la página, apareciendo en el listado las publicaciones que cumplan con los filtros cargados. {% rbimg backoffice_publications_list_filters_applied.png %} # Visualización de publicación Al ingresar a una publicación, se podrá ver la información de la misma, que consiste en la misma información mostrada en el listado, sumado a la imagen que se cargó para la misma y su dirección. {% rbimg backoffice_publication.png %} ",
    "url": "/docs/backoffice/publications.html",
    "relUrl": "/docs/backoffice/publications.html"
  },"12": {
    "doc": "Publications",
    "title": "Publications",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Publications microservice ![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/7552-2020C2-grupo5/publications-microservice) En [este link](https://github.com/7552-2020C2-grupo5/publications-microservice) se puede acceder al repositorio. # Documentación OpenAPI La documentación de swagger se puede acceder en el [root de la aplicación](https://bookbnb5-publications.herokuapp.com). La misma es generada automáticamente con `flask-restx`. # Status badges ![](https://raw.githubusercontent.com/7552-2020C2-grupo5/publications-microservice/master/coverage-badge.svg)[![Tests](https://github.com/7552-2020C2-grupo5/publications-microservice/actions/workflows/tests.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/publications-microservice/actions/workflows/tests.yml)[![Linters](https://github.com/7552-2020C2-grupo5/publications-microservice/actions/workflows/linters.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/publications-microservice/actions/workflows/linters.yml)[![Bandit](https://github.com/7552-2020C2-grupo5/publications-microservice/actions/workflows/bandit.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/publications-microservice/actions/workflows/bandit.yml) # Class diagram ![](https://github.com/7552-2020C2-grupo5/publications-microservice/blob/master/docs/images/project_classes.png?raw=true) # Packages dependencies ![](https://github.com/7552-2020C2-grupo5/publications-microservice/blob/master/docs/images/packages_dependencies.png?raw=true) # Deploy ## Heroku ![](https://heroku-badge.herokuapp.com/?app=bookbnb5-publications) Instrucciones [acá](https://github.com/7552-2020C2-grupo5/publications-microservice#deploy-to-heroku). ## Local ### Using docker Instrucciones [acá](https://github.com/7552-2020C2-grupo5/publications-microservice#docker) ### Using poetry Instrucciones [acá](https://github.com/7552-2020C2-grupo5/publications-microservice#running-locally) ## Configuration El microservicio usa [youconfigme](https://crossnox.github.io/YouConfigMe/), la cual sigue [The Twelve-Factor App](https://12factor.net/config). Config vars usadas: - `DATABASE_URL`: URI de la DB a usar - `DD_API_KEY`: api key de DataDog - `DD_DYNO_HOST`: requerido para agrupar hosts en DataDog - `DD_TAGS`: tags para DataDog - `ENV`: `DEV` denota un entorno de desarrollo, que no valida server tokens. Cualquier otro valor implica un entorno productivo. - `HEROKU_API_KEY`: api key de heroku requerida para setear config vars - `HEROKU_APP_NAME`: nombre de la app en heroku, requerida para setear config vars ",
    "url": "/docs/backend/publications.html",
    "relUrl": "/docs/backend/publications.html"
  },"13": {
    "doc": "Recommendations",
    "title": "Recommendations",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Recommendations microservice ![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/7552-2020C2-grupo5/recommendations_microservice) En [este link](https://github.com/7552-2020C2-grupo5/recommendations_microservice) se puede acceder al repositorio. # Documentación OpenAPI La documentación de swagger se puede acceder en el [root de la aplicación](https://recommendations_microservice.herokuapp.com). La misma es generada automáticamente con `flask-restx`. # Status badges ![](https://raw.githubusercontent.com/7552-2020C2-grupo5/recommendations_microservice/master/coverage-badge.svg)[![Tests](https://github.com/7552-2020C2-grupo5/recommendations_microservice/actions/workflows/tests.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/recommendations_microservice/actions/workflows/tests.yml)[![Linters](https://github.com/7552-2020C2-grupo5/recommendations_microservice/actions/workflows/linters.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/recommendations_microservice/actions/workflows/linters.yml)[![Bandit](https://github.com/7552-2020C2-grupo5/recommendations_microservice/actions/workflows/bandit.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/recommendations_microservice/actions/workflows/bandit.yml) # Class diagram ![](https://github.com/7552-2020C2-grupo5/recommendations_microservice/blob/master/docs/images/project_classes.png?raw=true) # Packages dependencies ![](https://github.com/7552-2020C2-grupo5/recommendations_microservice/blob/master/docs/images/packages_dependencies.png?raw=true) # Deploy ## Heroku ![](https://heroku-badge.herokuapp.com/?app=recommendations-microservice) Instrucciones [acá](https://github.com/7552-2020C2-grupo5/recommendations_microservice#deploy-to-heroku). ## Local ### Using docker Instrucciones [acá](https://github.com/7552-2020C2-grupo5/recommendations_microservice#docker) ### Using poetry Instrucciones [acá](https://github.com/7552-2020C2-grupo5/recommendations_microservice#running-locally) ## Configuration El microservicio usa [youconfigme](https://crossnox.github.io/YouConfigMe/), la cual sigue [The Twelve-Factor App](https://12factor.net/config). Config vars usadas: - `DATABASE_URL`: URI de la DB a usar - `DD_API_KEY`: api key de DataDog - `DD_DYNO_HOST`: requerido para agrupar hosts en DataDog - `DD_TAGS`: tags para DataDog - `ENV`: `DEV` denota un entorno de desarrollo, que no valida server tokens. Cualquier otro valor implica un entorno productivo. - `HEROKU_API_KEY`: api key de heroku requerida para setear config vars - `HEROKU_APP_NAME`: nombre de la app en heroku, requerida para setear config vars - `OAUTH_AUDIENCE`: lista separada por comas de audiencias de firebase - `SENDGRID_API_KEY`: api key de sendgrid usada para enviar mails - 'BOOKINGS_DB': URI de la db de donde consumir data de bookings - `PUBLICATIONS_DB`: URI de la db de donde consumir data de publicaciones - `REVIEWS_DB`: URI de donde consumir data de reviews ",
    "url": "/docs/backend/recommendations.html",
    "relUrl": "/docs/backend/recommendations.html"
  },"14": {
    "doc": "Reviews",
    "title": "Reviews",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Reviews microservice ![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/7552-2020C2-grupo5/reviews-microservice) En [este link](https://github.com/7552-2020C2-grupo5/reviews-microservice) se puede acceder al repositorio. # Documentación OpenAPI La documentación de swagger se puede acceder en el [root de la aplicación](https://bookbnb5-reviews.herokuapp.com). La misma es generada automáticamente con `flask-restx`. # Status badges ![](https://raw.githubusercontent.com/7552-2020C2-grupo5/reviews-microservice/master/coverage-badge.svg)[![Tests](https://github.com/7552-2020C2-grupo5/reviews-microservice/actions/workflows/tests.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/reviews-microservice/actions/workflows/tests.yml)[![Linters](https://github.com/7552-2020C2-grupo5/reviews-microservice/actions/workflows/linters.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/reviews-microservice/actions/workflows/linters.yml)[![Bandit](https://github.com/7552-2020C2-grupo5/reviews-microservice/actions/workflows/bandit.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/reviews-microservice/actions/workflows/bandit.yml) # Class diagram ![](https://github.com/7552-2020C2-grupo5/reviews-microservice/blob/master/docs/images/project_classes.png?raw=true) # Packages dependencies ![](https://github.com/7552-2020C2-grupo5/reviews-microservice/blob/master/docs/images/packages_dependencies.png?raw=true) # Deploy ## Heroku ![](https://heroku-badge.herokuapp.com/?app=bookbnb5-reviews) Instrucciones [acá](https://github.com/7552-2020C2-grupo5/reviews-microservice#deploy-to-heroku). ## Local ### Using docker Instrucciones [acá](https://github.com/7552-2020C2-grupo5/reviews-microservice#docker) ### Using poetry Instrucciones [acá](https://github.com/7552-2020C2-grupo5/reviews-microservice#running-locally) ## Configuration El microservicio usa [youconfigme](https://crossnox.github.io/YouConfigMe/), la cual sigue [The Twelve-Factor App](https://12factor.net/config). Config vars usadas: - `DATABASE_URL`: URI de la DB a usar - `DD_API_KEY`: api key de DataDog - `DD_DYNO_HOST`: requerido para agrupar hosts en DataDog - `DD_TAGS`: tags para DataDog - `ENV`: `DEV` denota un entorno de desarrollo, que no valida server tokens. Cualquier otro valor implica un entorno productivo. - `HEROKU_API_KEY`: api key de heroku requerida para setear config vars - `HEROKU_APP_NAME`: nombre de la app en heroku, requerida para setear config vars ",
    "url": "/docs/backend/reviews.html",
    "relUrl": "/docs/backend/reviews.html"
  },"15": {
    "doc": "Servidores",
    "title": "Servidores",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Listado de servidores {:toc} Al seleccionar la opción \"Servidores\" del menú, se abrirá el listado de servidores. En este se puede ver una tabla con todos los servidores que se han dado de alta. Para cada entrada de la tabla, se indica el nombre del servidor, la fecha de alta y su estado (que puede ser Activo o Bloqueado). {% rbimg backoffice_servers_list.png %} Para aquellos servidores que se encuentran activos, la columna \"Acciones\" de la tabla presenta un botón, el cual permite bloquear la API KEY asociada al mismo. En la esquina inferior derecha, se puede observar un botón \"+\", el cual redirige a la pantalla de alta de una nueva API KEY para un servidor. ## Bloqueo de servidor Al presionar dicho botón en un servidor, se abre el siguiente modal: {% rbimg backoffice_servers_list_block_modal.png %} Si se presiona \"Cancelar\", se cerrará el modal, volviendo al listado. Si se presiona \"Confirmar\", se bloqueará la API KEY asociada al servidor para el cual se clickeó el botón de bloqueo y se recargará el listado, mostrando los datos actualizados. # Alta de servidor Esta pantalla consiste en un formulario (que tiene un único campo) para poder dar de alta una nueva API KEY para el servidor seleccionado. {% rbimg backoffice_new_server.png %} En caso que el servidor elegido ya cuente con una API KEY activa, no se podrá dar de alta otra. {% rbimg backoffice_new_server_error.png %} Luego de elegir un servidor que no cuente con una API KEY activa, al presionar el botón \"Crear\", se generará una API KEY para el mismo y se la mostrará en la pantalla para que el administrador pueda copiarla (dado que no se podrá volver a visualizarla). {% rbimg backoffice_new_server_successful.png %} ",
    "url": "/docs/backoffice/servers.html",
    "relUrl": "/docs/backoffice/servers.html"
  },"16": {
    "doc": "Tokens",
    "title": "Tokens",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Tokens microservice ![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/7552-2020C2-grupo5/tokens_microservice) En [este link](https://github.com/7552-2020C2-grupo5/tokens_microservice) se puede acceder al repositorio. # Documentación OpenAPI La documentación de swagger se puede acceder en el [root de la aplicación](https://tokens-microservice.herokuapp.com). La misma es generada automáticamente con `flask-restx`. # Status badges ![](https://raw.githubusercontent.com/7552-2020C2-grupo5/tokens_microservice/master/coverage-badge.svg)[![Tests](https://github.com/7552-2020C2-grupo5/tokens_microservice/actions/workflows/tests.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/tokens_microservice/actions/workflows/tests.yml)[![Linters](https://github.com/7552-2020C2-grupo5/tokens_microservice/actions/workflows/linters.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/tokens_microservice/actions/workflows/linters.yml)[![Bandit](https://github.com/7552-2020C2-grupo5/tokens_microservice/actions/workflows/bandit.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/tokens_microservice/actions/workflows/bandit.yml) # Class diagram ![](https://github.com/7552-2020C2-grupo5/tokens_microservice/blob/master/docs/images/project_classes.png?raw=true) # Packages dependencies ![](https://github.com/7552-2020C2-grupo5/tokens_microservice/blob/master/docs/images/packages_dependencies.png?raw=true) # Deploy ## Heroku ![](https://heroku-badge.herokuapp.com/?app=tokens-microservice) Instrucciones [acá](https://github.com/7552-2020C2-grupo5/tokens_microservice#deploy-to-heroku). ## Local ### Using docker Instrucciones [acá](https://github.com/7552-2020C2-grupo5/tokens_microservice#docker) ### Using poetry Instrucciones [acá](https://github.com/7552-2020C2-grupo5/tokens_microservice#running-locally) ## Configuration El microservicio usa [youconfigme](https://crossnox.github.io/YouConfigMe/), la cual sigue [The Twelve-Factor App](https://12factor.net/config). Config vars usadas: - `DATABASE_URL`: URI de la DB a usar - `DD_API_KEY`: api key de DataDog - `DD_DYNO_HOST`: requerido para agrupar hosts en DataDog - `DD_TAGS`: tags para DataDog - `HEROKU_APP_NAME`: nombre de la app en heroku, requerida para setear config vars ",
    "url": "/docs/backend/tokens.html",
    "relUrl": "/docs/backend/tokens.html"
  },"17": {
    "doc": "Usuarios",
    "title": "Usuarios",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Listado de usuarios {:toc} Al seleccionar la opción \"Usuarios\" del menú, se abrirá el listado de usuarios. En este se puede ver una tabla con todos los usuarios de la aplicación mobile y sus datos principales, (nombre, apellido y mail) y su estado (que puede ser Activo o Bloqueado). {% rbimg backoffice_users_list.png %} Para aquellos usuarios que se encuentran activos, la columna \"Acciones\" de la tabla presenta dos botones: {% rbimg backoffice_users_list_actions.png %} El botón 1 redirige a la pantalla de visualización del usuario (se verá en la siguiente sección). El botón 2 se utiliza para bloquear un usuario. ## Bloqueo de usuario Al presionar el botón de bloqueo en un usuario, se abre el siguiente modal: {% rbimg backoffice_users_list_block_modal.png %} Si se presiona \"Cancelar\", se cerrará el modal, volviendo al listado de usuarios. Si se presiona \"Confirmar\", se bloqueará el usuario para el cual se clickeó el botón de bloqueo y se recargará el listado, mostrando los datos actualizados. ## Filtros Por encima de la tabla se encuentra un desplegable donde se pueden ingresar los filtros a aplicar sobre el listado. {% rbimg backoffice_users_list_filters.png %} Estos campos no son obligatorios y se pueden aplicar los filtros que se desee. Los campos indican lo siguiente: - Nombre: busca a aquellos usuarios que contengan la cadena ingresada dentro de su nombre - Apellido: busca a aquellos usuarios que contengan la cadena ingresada dentro de su apellido - Email: busca a aquellos usuarios que contengan la cadena ingresada dentro de su mail Una vez ingresados los filtros deseados, se debe hacer click en el botón \"Aplicar\" dentro del desplegable. Se recargará entonces la página, apareciendo en el listado los usuarios que cumplan con los filtros cargados. {% rbimg backoffice_users_list_filters_applied.png %} # Visualización de usuario Al ingresar al perfil de un usuario, se podrá ver los datos personales del mismo y también la información sobre su wallet y el balance de saldo que posee en la misma (en ETH, USD y EUR). {% rbimg backoffice_user.png %} Al presionar el botón \"Cargar saldo\", se abre un modal donde se podrá ingresar el monto de ETH a cargar en la wallet del usuario. {% rbimg backoffice_user_recharge.png %} Si se presiona el botón \"Cancelar\", se cerrará el modal sin realizar ninguna acción. Si se presiona \"Confirmar\", se procederá a realizar la carga de saldo, recargando la pantalla y actualizando los montos del balance, como se muestra a continuación. {% rbimg backoffice_user_recharge_applied.png %} ",
    "url": "/docs/backoffice/users.html",
    "relUrl": "/docs/backoffice/users.html"
  },"18": {
    "doc": "Users",
    "title": "Users",
    "content": "Contenidos {: .text-delta } 1. TOC {:toc} # Users microservice ![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/7552-2020C2-grupo5/users-microservice) En [este link](https://github.com/7552-2020C2-grupo5/users-microservice) se puede acceder al repositorio. # Documentación OpenAPI La documentación de swagger se puede acceder en el [root de la aplicación](https://bookbnb5-users-microservice.herokuapp.com). La misma es generada automáticamente con `flask-restx`. # Status badges ![](https://raw.githubusercontent.com/7552-2020C2-grupo5/users-microservice/master/coverage-badge.svg)[![Tests](https://github.com/7552-2020C2-grupo5/users-microservice/actions/workflows/tests.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/users-microservice/actions/workflows/tests.yml)[![Linters](https://github.com/7552-2020C2-grupo5/users-microservice/actions/workflows/linters.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/users-microservice/actions/workflows/linters.yml)[![Bandit](https://github.com/7552-2020C2-grupo5/users-microservice/actions/workflows/bandit.yml/badge.svg)](https://github.com/7552-2020C2-grupo5/users-microservice/actions/workflows/bandit.yml) # Class diagram ![](https://github.com/7552-2020C2-grupo5/users-microservice/blob/master/docs/images/project_classes.png?raw=true) # Packages dependencies ![](https://github.com/7552-2020C2-grupo5/users-microservice/blob/master/docs/images/packages_dependencies.png?raw=true) # Deploy ## Heroku ![](https://heroku-badge.herokuapp.com/?app=bookbnb5-users-microservice) Instrucciones [acá](https://github.com/7552-2020C2-grupo5/users-microservice#deploy-to-heroku). ## Local ### Using docker Instrucciones [acá](https://github.com/7552-2020C2-grupo5/users-microservice#docker) ### Using poetry Instrucciones [acá](https://github.com/7552-2020C2-grupo5/users-microservice#running-locally) ## Configuration El microservicio usa [youconfigme](https://crossnox.github.io/YouConfigMe/), la cual sigue [The Twelve-Factor App](https://12factor.net/config). Config vars usadas: - `DATABASE_URL`: URI de la DB a usar - `DD_API_KEY`: api key de DataDog - `DD_DYNO_HOST`: requerido para agrupar hosts en DataDog - `DD_TAGS`: tags para DataDog - `ENV`: `DEV` denota un entorno de desarrollo, que no valida server tokens. Cualquier otro valor implica un entorno productivo. - `HEROKU_API_KEY`: api key de heroku requerida para setear config vars - `HEROKU_APP_NAME`: nombre de la app en heroku, requerida para setear config vars - `OAUTH_AUDIENCE`: lista separada por comas de audiencias de firebase - `SENDGRID_API_KEY`: api key de sendgrid usada para enviar mails ",
    "url": "/docs/backend/users.html",
    "relUrl": "/docs/backend/users.html"
  }
}
